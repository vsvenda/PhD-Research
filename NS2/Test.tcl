# TCL Script for generated by NS2_scriptor
# WARNING: This script contains parts specific to the PiccSIM-simulator
# ======================================================================
# Define options
# ======================================================================

set val(chan)       Channel/WirelessChannel
set val(prop)       Propagation/TwoRayGround
set val(netif)      Phy/WirelessPhy
set val(mac)        Mac/802_11
set val(ifq)        Queue/DropTail
set val(ll)         LL
set val(ant)        Antenna/OmniAntenna
set val(x)          1000
set val(y)          1000
set val(ifqlen)     50
set val(adhocRouting)   AODV
set val(nn)             2
set val(agentTrace)     ON
set val(routerTrace)    ON
set val(movementTrace)  ON
set val(macTrace)       OFF
set val(traceFile)       Simple.tr
set val(namFile)       Simple.nam
# ======================================================================
# Main program
# ======================================================================

#Create a simulator object
set ns [new Simulator]

set tf [open $val(traceFile) w]
$ns trace-all $tf
$ns use-newtrace

set nf [open $val(namFile) w]
$ns namtrace-all-wireless $nf $val(x) $val(y)

$ns use-scheduler Simulink

#Create topology instance
set topo	[new Topography]
$topo load_flatgrid $val(x) $val(y)

#create gods
set god_ [create-god $val(nn)]
set chan_1_ [new $val(chan)]

#Config nodes
$ns node-config  -adhocRouting $val(adhocRouting) \
                 -macType      $val(mac) \
                 -llType       $val(ll) \
                 -ifqType      $val(ifq) \
                 -ifqLen       $val(ifqlen) \
                 -antType      $val(ant) \
                 -propType     $val(prop) \
                 -phyType      $val(netif) \
                 -channel      $chan_1_ \
                 -topoInstance $topo \
                 -agentTrace   $val(agentTrace) \
                 -routerTrace  $val(routerTrace) \
                 -macTrace     $val(macTrace) \
                 -movementTrace $val(movementTrace) \

#Create wireless nodes
for {set i 0} {$i < $val(nn) } {incr i} {
      set n($i) [$ns node]
      $n($i) random-motion 0
}

#Set nodes position
$n(0) set X_ 0.0
$n(0) set Y_ 0.0
$n(0) set Z_ 0.0
$n(1) set X_ 0.0
$n(1) set Y_ 10.0
$n(1) set Z_ 0.0

#Define node movement

#Add taps for communication with Simulink to every  node
set c 22200

#Configure the exit point
for {set i 0} {$i  <  $val(nn)} {incr i 1} {
set tap($i) [new Agent/Tap];         # Create a TCPTap Agent
set ipnet($i) [new Network/IP];        # Create a Network agent
$ipnet($i) open writeonly
$tap($i) network $ipnet($i);              # Connect network agent to tap agent
$ns attach-agent $n($i) $tap($i);         # Attach agent to the node.
}

# Configure the Entry point
set k $val(nn)
for {set i 0} {$i < $val(nn)} {incr i 1} {
set p [expr  $c+$i]
set d [expr  $k+$i]
set tap($d) [new Agent/Tap];         # Create the TCPTap Agent
set bpf($i) [new Network/Pcap/Live];   # Create the bpf
set dev [$bpf($i) open readonly eth0]
$bpf($i) filter "dst port $p"
$tap($d) network $bpf($i);                # Connect bpf to TCPTap Agent
$ns attach-agent $n($i) $tap($d);         # Attach TCPTap Agent to the node
}

#Set simulation time-synchronization between Simulink and ns-2 

createsync 23201
createrecv

#Create agents
set TCP_0 [new Agent/TCP]
$ns attach-agent $n(0) $TCP_0
$TCP_0 set window_ 
$TCP_0 set packetSize_ 

set TCPSink_1 [new Agent/TCPSink]
$ns attach-agent $n(1) $TCPSink_1

#Set traffic
set cbr_0 [new Application/Traffic/CBR]
$cbr_0 attach-agent $TCP_0
$ns connect $TCP_0 $TCPSink_1
$cbr_0 set packetSize_ 50

#Tell nodes when the simulation ends
for {set i 0} {$i < $val(nn) } {incr i} {
    $ns at 1 "$n($i) reset";
}

#Set size in nam
for {set i 0} {$i < $val(nn) } {incr i} {
      $ns initial_node_pos $n($i) 20
}

#Schedule the senario

$ns at 0 "$cbr_0 start"
$ns at 1 "$cbr_0 stop"

#Time to finish the senario
$ns at 1.1 "finish"

#finish procedure
proc finish {} {
    global ns tf nf
    $ns flush-trace
    close $tf
    close $nf
    exit 0
}

#Start the senario
$ns run